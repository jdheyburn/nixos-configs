# GitCommitMsg - adds the JIRA ticketed branch named to the commit message
unalias gcmsg # remove the existing gcmsg
function gcmsg() {
    setopt local_options BASH_REMATCH

    local msg=$@
    if [ -z "$msg" ]; then
        echo "gcmsg - no message was provided"
        return 1
    fi

    local curr_branch=$(git_current_branch)
    local regex="^[A-Z]{2,}\-[0-9]+"
    if [[ $curr_branch =~ $regex ]]; then
        local ticket="${BASH_REMATCH[1]}"
        local msg="$ticket - $msg"
    fi

    git commit -m "$msg"
}

# makechangedir - takes in a dir to create and then cd into
function mc() {
    local dir=$1
    if [ -z "$dir" ]; then
        echo "mc - no dir was provided"
        return 1
    fi

    mkdir -p "$dir"
    cd "$dir"
}

# SearchDirectory - recursive search through the targeted dir for the text in any file
function sd() {
    local searchTerm=$1
    local searchDir=$2
    if [ -z "$searchTerm" ]; then
        echo "sd - No search term provided"
        return 1
    fi
    if [ -z "$searchDir" ]; then
        echo "sd - No dir specified - defaulting to current dir"
        searchDir="."
    fi

    grep --ignore-case --files-with-matches --recursive --no-messages --exclude-dir=".terraform" $searchTerm $searchDir
}

# UnZip - unzip the archive into a dir at the same location with the archive name
function uz() {

    local readlinkCmd="readlink"
    if [[ "$OSTYPE" == "darwin"* ]]; then
    	local readlinkCmd="greadlink"
    fi

    local archive=$1
    if [ -z "$archive" ]; then
        echo "uz - No archive specified"
        return 1
    fi

    local archivePath=$($readlinkCmd -f $archive)
    if [ ! -f $archivePath ]; then
        echo "uz - Archive not found: $archivePath"
        return 1
    fi

    local extractDir=$(echo $archivePath | sed -e "s/.zip$//")
    if [ -e $extractDir ] && [ ! -d $extractDir ]; then
        echo "uz - ExtractDir exists but not as a directory: $extractDir"
    fi
    mkdir $extractDir
    unzip $archive -d $extractDir
}

if [ -n "$\{commands[fzf-share]\}" ]; then
    source "$(fzf-share)/key-bindings.zsh"
    source "$(fzf-share)/completion.zsh"
fi

